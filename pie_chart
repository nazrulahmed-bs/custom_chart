import 'package:charts_flutter/flutter.dart' as charts;
import 'package:flutter/material.dart';

class DonutPieChart extends StatelessWidget {
  final List<charts.Series<LinearSales, int>> seriesList;
  final bool? animate;

  DonutPieChart(this.seriesList, {this.animate});

  /// Creates a [PieChart] with sample data and no transition.
  factory DonutPieChart.withSampleData() {
    return DonutPieChart(
      _createSampleData(),
      // Disable animations for image tests.
      animate: false,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Container(
        color: Colors.white,
        height: 720.0,
        width: 520.0,
        child: Stack(children: <Widget>[
          Center(
              child: Container(
                  height: 180,
                  width: 280,
                  color: Colors.white,
                  child: charts.PieChart<int>(seriesList,
                      animate: animate,
                      defaultRenderer: charts.ArcRendererConfig(
                        arcRendererDecorators: [
                          charts.ArcLabelDecorator(
                              //labelPadding:-25,
                              labelPosition: charts.ArcLabelPosition.outside),
                        ],
                        arcWidth: 30,
                      )))),
        ]));
    return Container(
      color: Colors.white,
      height: 220.0,
      width: 220.0,
      child: charts.PieChart<int>(
        seriesList,
        animate: animate,
        // Configure the width of the pie slices to 60px. The remaining space in
        // the chart will be left as a hole in the center.
        defaultRenderer: charts.ArcRendererConfig(
            arcWidth: 20,
            arcRendererDecorators: [
              charts.ArcLabelDecorator(
                  labelPosition: charts.ArcLabelPosition.outside)
            ]),
      ),
    );
  }

  /// Create one series with sample hard coded data.
  static List<charts.Series<LinearSales, int>> _createSampleData() {
    final data = [
      LinearSales(0, 10),
      LinearSales(1, 75),
      LinearSales(2, 6),
      LinearSales(3, 7),
      LinearSales(4, 8),
    ];

    return [
      charts.Series<LinearSales, int>(
        id: 'Sales',
        domainFn: (LinearSales sales, _) => sales.year,
        measureFn: (LinearSales sales, _) => sales.sales,
        colorFn: (LinearSales sales, _) =>
            charts.MaterialPalette.red.shadeDefault,
        data: data,
      )
    ];
  }
}

/// Sample linear data type.
class LinearSales {
  final int year;
  final int sales;

  LinearSales(this.year, this.sales);
}
